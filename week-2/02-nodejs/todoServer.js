/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

const aTodo = {
  'title': "", 'description': "", 'status': 'ok', 'ID': 123, 'createdAt': `${new Date().getTime()}`, 'LastupdatedAt': `${new Date().getTime() / 10000}`
}
const todos = [{ 'title': "Study", 'description': "Lorem ipsum text description of a task", 'completed': 'false', 'createdAt': `1705299694434`, 'LastupdatedAt': `1705299752625` }]

app.get("/todos", (req, res) => {
  res.status(200).json({ todos })
})

app.get("/todos/:id", (req, res) => {
  let { id } = req.params;

  //search for id == ID from todos array
  //if found return 200 ok
  //else return 404 not found

  todos.forEach((element) => {
    if (element.ID.toString() == id) {
      res.status(200).json(element)
    }
    else {
      res.status(404).json("Not Found")
    }
  })


})

app.post("/todos", (req, res) => {

  const { body } = req;
  console.log(body);
  // verify if the body follows the same format or not
  // if not return 400 bad request
  // else add the body to the todos array
  // return 201 created with the id of the created todo item in json format


  const newTodo = {
    ...body,
    createdAt: `${new Date().getTime()}`,
    LastupdatedAt: `${new Date().getTime()}`
  }

  // console.log(newTodo)
  todos.push(newTodo);

  res.status(201).json({ id: newTodo.ID })



})

app.put("/todos/:id", (req, res) => {

  let { id } = req.params;
  const { body } = req;

  todos.forEach((element) => {
    if (element.ID.toString() == id) {
      element.title = body.title;
      element.description = body.description;
      element.completed = body.completed;
      element.LastupdatedAt = `${new Date().getTime()}`
      res.status(200).json(element)
    }
    else {
      res.status(404).json("Not Found")
    }
  })





})

app.delete("/todos/:id", (req, res) => {

  let { id } = req.params;

  todos.forEach((element) => {
    if (element.ID.toString() == id) {
      todos.pop(element);
      res.status(200).json(element)
    }
    else {
      res.status(404).json("Not Found")
    }
  })


})


app.listen(3000, () => { console.log("The server has started at port 3000") })

module.exports = app;